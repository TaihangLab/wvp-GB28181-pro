# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import protos.generated.vision_service_pb2 as vision__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in vision_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AuthServiceStub(object):
    """认证服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/vision.AuthService/Login',
                request_serializer=vision__service__pb2.LoginRequest.SerializeToString,
                response_deserializer=vision__service__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.Register = channel.unary_unary(
                '/vision.AuthService/Register',
                request_serializer=vision__service__pb2.RegisterRequest.SerializeToString,
                response_deserializer=vision__service__pb2.RegisterResponse.FromString,
                _registered_method=True)


class AuthServiceServicer(object):
    """认证服务
    """

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=vision__service__pb2.LoginRequest.FromString,
                    response_serializer=vision__service__pb2.LoginResponse.SerializeToString,
            ),
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=vision__service__pb2.RegisterRequest.FromString,
                    response_serializer=vision__service__pb2.RegisterResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vision.AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('vision.AuthService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """认证服务
    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.AuthService/Login',
            vision__service__pb2.LoginRequest.SerializeToString,
            vision__service__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.AuthService/Register',
            vision__service__pb2.RegisterRequest.SerializeToString,
            vision__service__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CameraServiceStub(object):
    """摄像头服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListCameras = channel.unary_unary(
                '/vision.CameraService/ListCameras',
                request_serializer=vision__service__pb2.ListCamerasRequest.SerializeToString,
                response_deserializer=vision__service__pb2.ListCamerasResponse.FromString,
                _registered_method=True)
        self.GetCamera = channel.unary_unary(
                '/vision.CameraService/GetCamera',
                request_serializer=vision__service__pb2.GetCameraRequest.SerializeToString,
                response_deserializer=vision__service__pb2.GetCameraResponse.FromString,
                _registered_method=True)
        self.AddCamera = channel.unary_unary(
                '/vision.CameraService/AddCamera',
                request_serializer=vision__service__pb2.AddCameraRequest.SerializeToString,
                response_deserializer=vision__service__pb2.AddCameraResponse.FromString,
                _registered_method=True)
        self.UpdateCamera = channel.unary_unary(
                '/vision.CameraService/UpdateCamera',
                request_serializer=vision__service__pb2.UpdateCameraRequest.SerializeToString,
                response_deserializer=vision__service__pb2.UpdateCameraResponse.FromString,
                _registered_method=True)
        self.DeleteCamera = channel.unary_unary(
                '/vision.CameraService/DeleteCamera',
                request_serializer=vision__service__pb2.DeleteCameraRequest.SerializeToString,
                response_deserializer=vision__service__pb2.DeleteCameraResponse.FromString,
                _registered_method=True)


class CameraServiceServicer(object):
    """摄像头服务
    """

    def ListCameras(self, request, context):
        """获取摄像头列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCamera(self, request, context):
        """获取摄像头详情
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddCamera(self, request, context):
        """添加摄像头
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCamera(self, request, context):
        """更新摄像头
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCamera(self, request, context):
        """删除摄像头
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CameraServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListCameras': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCameras,
                    request_deserializer=vision__service__pb2.ListCamerasRequest.FromString,
                    response_serializer=vision__service__pb2.ListCamerasResponse.SerializeToString,
            ),
            'GetCamera': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCamera,
                    request_deserializer=vision__service__pb2.GetCameraRequest.FromString,
                    response_serializer=vision__service__pb2.GetCameraResponse.SerializeToString,
            ),
            'AddCamera': grpc.unary_unary_rpc_method_handler(
                    servicer.AddCamera,
                    request_deserializer=vision__service__pb2.AddCameraRequest.FromString,
                    response_serializer=vision__service__pb2.AddCameraResponse.SerializeToString,
            ),
            'UpdateCamera': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCamera,
                    request_deserializer=vision__service__pb2.UpdateCameraRequest.FromString,
                    response_serializer=vision__service__pb2.UpdateCameraResponse.SerializeToString,
            ),
            'DeleteCamera': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCamera,
                    request_deserializer=vision__service__pb2.DeleteCameraRequest.FromString,
                    response_serializer=vision__service__pb2.DeleteCameraResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vision.CameraService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('vision.CameraService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CameraService(object):
    """摄像头服务
    """

    @staticmethod
    def ListCameras(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.CameraService/ListCameras',
            vision__service__pb2.ListCamerasRequest.SerializeToString,
            vision__service__pb2.ListCamerasResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCamera(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.CameraService/GetCamera',
            vision__service__pb2.GetCameraRequest.SerializeToString,
            vision__service__pb2.GetCameraResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddCamera(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.CameraService/AddCamera',
            vision__service__pb2.AddCameraRequest.SerializeToString,
            vision__service__pb2.AddCameraResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCamera(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.CameraService/UpdateCamera',
            vision__service__pb2.UpdateCameraRequest.SerializeToString,
            vision__service__pb2.UpdateCameraResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCamera(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.CameraService/DeleteCamera',
            vision__service__pb2.DeleteCameraRequest.SerializeToString,
            vision__service__pb2.DeleteCameraResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SkillServiceStub(object):
    """技能服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListSkills = channel.unary_unary(
                '/vision.SkillService/ListSkills',
                request_serializer=vision__service__pb2.ListSkillsRequest.SerializeToString,
                response_deserializer=vision__service__pb2.ListSkillsResponse.FromString,
                _registered_method=True)
        self.GetSkill = channel.unary_unary(
                '/vision.SkillService/GetSkill',
                request_serializer=vision__service__pb2.GetSkillRequest.SerializeToString,
                response_deserializer=vision__service__pb2.GetSkillResponse.FromString,
                _registered_method=True)
        self.AddSkill = channel.unary_unary(
                '/vision.SkillService/AddSkill',
                request_serializer=vision__service__pb2.AddSkillRequest.SerializeToString,
                response_deserializer=vision__service__pb2.AddSkillResponse.FromString,
                _registered_method=True)
        self.UpdateSkill = channel.unary_unary(
                '/vision.SkillService/UpdateSkill',
                request_serializer=vision__service__pb2.UpdateSkillRequest.SerializeToString,
                response_deserializer=vision__service__pb2.UpdateSkillResponse.FromString,
                _registered_method=True)
        self.DeleteSkill = channel.unary_unary(
                '/vision.SkillService/DeleteSkill',
                request_serializer=vision__service__pb2.DeleteSkillRequest.SerializeToString,
                response_deserializer=vision__service__pb2.DeleteSkillResponse.FromString,
                _registered_method=True)


class SkillServiceServicer(object):
    """技能服务
    """

    def ListSkills(self, request, context):
        """获取技能列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSkill(self, request, context):
        """获取技能详情
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddSkill(self, request, context):
        """添加技能
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSkill(self, request, context):
        """更新技能
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSkill(self, request, context):
        """删除技能
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SkillServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListSkills': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSkills,
                    request_deserializer=vision__service__pb2.ListSkillsRequest.FromString,
                    response_serializer=vision__service__pb2.ListSkillsResponse.SerializeToString,
            ),
            'GetSkill': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSkill,
                    request_deserializer=vision__service__pb2.GetSkillRequest.FromString,
                    response_serializer=vision__service__pb2.GetSkillResponse.SerializeToString,
            ),
            'AddSkill': grpc.unary_unary_rpc_method_handler(
                    servicer.AddSkill,
                    request_deserializer=vision__service__pb2.AddSkillRequest.FromString,
                    response_serializer=vision__service__pb2.AddSkillResponse.SerializeToString,
            ),
            'UpdateSkill': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSkill,
                    request_deserializer=vision__service__pb2.UpdateSkillRequest.FromString,
                    response_serializer=vision__service__pb2.UpdateSkillResponse.SerializeToString,
            ),
            'DeleteSkill': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSkill,
                    request_deserializer=vision__service__pb2.DeleteSkillRequest.FromString,
                    response_serializer=vision__service__pb2.DeleteSkillResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vision.SkillService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('vision.SkillService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SkillService(object):
    """技能服务
    """

    @staticmethod
    def ListSkills(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.SkillService/ListSkills',
            vision__service__pb2.ListSkillsRequest.SerializeToString,
            vision__service__pb2.ListSkillsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSkill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.SkillService/GetSkill',
            vision__service__pb2.GetSkillRequest.SerializeToString,
            vision__service__pb2.GetSkillResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddSkill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.SkillService/AddSkill',
            vision__service__pb2.AddSkillRequest.SerializeToString,
            vision__service__pb2.AddSkillResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSkill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.SkillService/UpdateSkill',
            vision__service__pb2.UpdateSkillRequest.SerializeToString,
            vision__service__pb2.UpdateSkillResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSkill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.SkillService/DeleteSkill',
            vision__service__pb2.DeleteSkillRequest.SerializeToString,
            vision__service__pb2.DeleteSkillResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ModelServiceStub(object):
    """模型服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListModels = channel.unary_unary(
                '/vision.ModelService/ListModels',
                request_serializer=vision__service__pb2.ListModelsRequest.SerializeToString,
                response_deserializer=vision__service__pb2.ListModelsResponse.FromString,
                _registered_method=True)
        self.GetModel = channel.unary_unary(
                '/vision.ModelService/GetModel',
                request_serializer=vision__service__pb2.GetModelRequest.SerializeToString,
                response_deserializer=vision__service__pb2.GetModelResponse.FromString,
                _registered_method=True)
        self.AddModel = channel.unary_unary(
                '/vision.ModelService/AddModel',
                request_serializer=vision__service__pb2.AddModelRequest.SerializeToString,
                response_deserializer=vision__service__pb2.AddModelResponse.FromString,
                _registered_method=True)
        self.UpdateModel = channel.unary_unary(
                '/vision.ModelService/UpdateModel',
                request_serializer=vision__service__pb2.UpdateModelRequest.SerializeToString,
                response_deserializer=vision__service__pb2.UpdateModelResponse.FromString,
                _registered_method=True)
        self.DeleteModel = channel.unary_unary(
                '/vision.ModelService/DeleteModel',
                request_serializer=vision__service__pb2.DeleteModelRequest.SerializeToString,
                response_deserializer=vision__service__pb2.DeleteModelResponse.FromString,
                _registered_method=True)
        self.Infer = channel.unary_unary(
                '/vision.ModelService/Infer',
                request_serializer=vision__service__pb2.InferRequest.SerializeToString,
                response_deserializer=vision__service__pb2.InferResponse.FromString,
                _registered_method=True)
        self.LoadModel = channel.unary_unary(
                '/vision.ModelService/LoadModel',
                request_serializer=vision__service__pb2.LoadModelRequest.SerializeToString,
                response_deserializer=vision__service__pb2.LoadModelResponse.FromString,
                _registered_method=True)
        self.UnloadModel = channel.unary_unary(
                '/vision.ModelService/UnloadModel',
                request_serializer=vision__service__pb2.UnloadModelRequest.SerializeToString,
                response_deserializer=vision__service__pb2.UnloadModelResponse.FromString,
                _registered_method=True)
        self.GetModelInfo = channel.unary_unary(
                '/vision.ModelService/GetModelInfo',
                request_serializer=vision__service__pb2.ModelInfoRequest.SerializeToString,
                response_deserializer=vision__service__pb2.ModelInfoResponse.FromString,
                _registered_method=True)
        self.SyncModelsFromTriton = channel.unary_unary(
                '/vision.ModelService/SyncModelsFromTriton',
                request_serializer=vision__service__pb2.SyncModelsRequest.SerializeToString,
                response_deserializer=vision__service__pb2.SyncModelsResponse.FromString,
                _registered_method=True)


class ModelServiceServicer(object):
    """模型服务
    """

    def ListModels(self, request, context):
        """获取模型列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModel(self, request, context):
        """获取模型详情
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddModel(self, request, context):
        """添加模型
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateModel(self, request, context):
        """更新模型
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteModel(self, request, context):
        """删除模型
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Infer(self, request, context):
        """执行模型推理
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadModel(self, request, context):
        """加载模型
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnloadModel(self, request, context):
        """卸载模型
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelInfo(self, request, context):
        """获取模型详细信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncModelsFromTriton(self, request, context):
        """同步Triton服务器上的模型到数据库
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListModels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListModels,
                    request_deserializer=vision__service__pb2.ListModelsRequest.FromString,
                    response_serializer=vision__service__pb2.ListModelsResponse.SerializeToString,
            ),
            'GetModel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModel,
                    request_deserializer=vision__service__pb2.GetModelRequest.FromString,
                    response_serializer=vision__service__pb2.GetModelResponse.SerializeToString,
            ),
            'AddModel': grpc.unary_unary_rpc_method_handler(
                    servicer.AddModel,
                    request_deserializer=vision__service__pb2.AddModelRequest.FromString,
                    response_serializer=vision__service__pb2.AddModelResponse.SerializeToString,
            ),
            'UpdateModel': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateModel,
                    request_deserializer=vision__service__pb2.UpdateModelRequest.FromString,
                    response_serializer=vision__service__pb2.UpdateModelResponse.SerializeToString,
            ),
            'DeleteModel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteModel,
                    request_deserializer=vision__service__pb2.DeleteModelRequest.FromString,
                    response_serializer=vision__service__pb2.DeleteModelResponse.SerializeToString,
            ),
            'Infer': grpc.unary_unary_rpc_method_handler(
                    servicer.Infer,
                    request_deserializer=vision__service__pb2.InferRequest.FromString,
                    response_serializer=vision__service__pb2.InferResponse.SerializeToString,
            ),
            'LoadModel': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadModel,
                    request_deserializer=vision__service__pb2.LoadModelRequest.FromString,
                    response_serializer=vision__service__pb2.LoadModelResponse.SerializeToString,
            ),
            'UnloadModel': grpc.unary_unary_rpc_method_handler(
                    servicer.UnloadModel,
                    request_deserializer=vision__service__pb2.UnloadModelRequest.FromString,
                    response_serializer=vision__service__pb2.UnloadModelResponse.SerializeToString,
            ),
            'GetModelInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelInfo,
                    request_deserializer=vision__service__pb2.ModelInfoRequest.FromString,
                    response_serializer=vision__service__pb2.ModelInfoResponse.SerializeToString,
            ),
            'SyncModelsFromTriton': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncModelsFromTriton,
                    request_deserializer=vision__service__pb2.SyncModelsRequest.FromString,
                    response_serializer=vision__service__pb2.SyncModelsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vision.ModelService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('vision.ModelService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ModelService(object):
    """模型服务
    """

    @staticmethod
    def ListModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.ModelService/ListModels',
            vision__service__pb2.ListModelsRequest.SerializeToString,
            vision__service__pb2.ListModelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.ModelService/GetModel',
            vision__service__pb2.GetModelRequest.SerializeToString,
            vision__service__pb2.GetModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.ModelService/AddModel',
            vision__service__pb2.AddModelRequest.SerializeToString,
            vision__service__pb2.AddModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.ModelService/UpdateModel',
            vision__service__pb2.UpdateModelRequest.SerializeToString,
            vision__service__pb2.UpdateModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.ModelService/DeleteModel',
            vision__service__pb2.DeleteModelRequest.SerializeToString,
            vision__service__pb2.DeleteModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Infer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.ModelService/Infer',
            vision__service__pb2.InferRequest.SerializeToString,
            vision__service__pb2.InferResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.ModelService/LoadModel',
            vision__service__pb2.LoadModelRequest.SerializeToString,
            vision__service__pb2.LoadModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnloadModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.ModelService/UnloadModel',
            vision__service__pb2.UnloadModelRequest.SerializeToString,
            vision__service__pb2.UnloadModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetModelInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.ModelService/GetModelInfo',
            vision__service__pb2.ModelInfoRequest.SerializeToString,
            vision__service__pb2.ModelInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SyncModelsFromTriton(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vision.ModelService/SyncModelsFromTriton',
            vision__service__pb2.SyncModelsRequest.SerializeToString,
            vision__service__pb2.SyncModelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
