syntax = "proto3";

package vision;


// 认证服务
service AuthService {
    rpc Login(LoginRequest) returns (LoginResponse);
    rpc Register(RegisterRequest) returns (RegisterResponse);
}

// 认证请求和响应
message LoginRequest {
    string username = 1;
    string password = 2;
}

message LoginResponse {
    string token = 1;
}

message RegisterRequest {
    string username = 1;
    string password = 2;
    string email = 3;
}

message RegisterResponse {
    bool success = 1;
}

// 摄像头服务
service CameraService {
    // 获取摄像头列表
    rpc ListCameras(ListCamerasRequest) returns (ListCamerasResponse) {}
    // 获取摄像头详情
    rpc GetCamera(GetCameraRequest) returns (GetCameraResponse) {}
    // 添加摄像头
    rpc AddCamera(AddCameraRequest) returns (AddCameraResponse) {}
    // 更新摄像头
    rpc UpdateCamera(UpdateCameraRequest) returns (UpdateCameraResponse) {}
    // 删除摄像头
    rpc DeleteCamera(DeleteCameraRequest) returns (DeleteCameraResponse) {}
}

// 技能服务
service SkillService {
    // 获取技能列表
    rpc ListSkills(ListSkillsRequest) returns (ListSkillsResponse) {}
    // 获取技能详情
    rpc GetSkill(GetSkillRequest) returns (GetSkillResponse) {}
    // 添加技能
    rpc AddSkill(AddSkillRequest) returns (AddSkillResponse) {}
    // 更新技能
    rpc UpdateSkill(UpdateSkillRequest) returns (UpdateSkillResponse) {}
    // 删除技能
    rpc DeleteSkill(DeleteSkillRequest) returns (DeleteSkillResponse) {}
}

// 模型服务
service ModelService {
    // 获取模型列表
    rpc ListModels(ListModelsRequest) returns (ListModelsResponse) {}
    // 获取模型详情
    rpc GetModel(GetModelRequest) returns (GetModelResponse) {}
    // 添加模型
    rpc AddModel(AddModelRequest) returns (AddModelResponse) {}
    // 更新模型
    rpc UpdateModel(UpdateModelRequest) returns (UpdateModelResponse) {}
    // 删除模型
    rpc DeleteModel(DeleteModelRequest) returns (DeleteModelResponse) {}
    // 执行模型推理
    rpc Infer(InferRequest) returns (InferResponse) {}
    // 加载模型
    rpc LoadModel(LoadModelRequest) returns (LoadModelResponse) {}
    // 卸载模型
    rpc UnloadModel(UnloadModelRequest) returns (UnloadModelResponse) {}
    // 获取模型详细信息
    rpc GetModelInfo(ModelInfoRequest) returns (ModelInfoResponse) {}
    // 同步Triton服务器上的模型到数据库
    rpc SyncModelsFromTriton(SyncModelsRequest) returns (SyncModelsResponse) {}
}

// 消息定义
message Camera {
    string id = 1;
    string device_id = 2;
    string name = 3;
    string location = 4;
    repeated string tags = 5;
    bool status = 6;
    int32 warning_level = 7;
    float frame_rate = 8;
    string running_period = 9;
    string electronic_fence = 10;
    repeated string skill_ids = 11;
}

message Skill {
    string id = 1;
    string name = 2;
    string description = 3;
    bool status = 4;
    string config = 5;
    repeated string model_ids = 6;
}

message Model {
    string id = 1;
    string name = 2;
    string version = 3;
    string description = 4;
    bool status = 5;
    string config = 6;
    string triton_config = 7;
}

// 请求和响应消息
message ListCamerasRequest {
    int32 page = 1;
    int32 page_size = 2;
    string query = 3;
    bool status = 4;
}

message ListCamerasResponse {
    repeated Camera cameras = 1;
    int32 total = 2;
}

message GetCameraRequest {
    string id = 1;
}

message GetCameraResponse {
    Camera camera = 1;
}

message AddCameraRequest {
    Camera camera = 1;
}

message AddCameraResponse {
    Camera camera = 1;
}

message UpdateCameraRequest {
    string id = 1;
    Camera camera = 2;
}

message UpdateCameraResponse {
    Camera camera = 1;
}

message DeleteCameraRequest {
    string id = 1;
}

message DeleteCameraResponse {
    bool success = 1;
}

message ListSkillsRequest {
    int32 page = 1;
    int32 page_size = 2;
    string query = 3;
    bool status = 4;
}

message ListSkillsResponse {
    repeated Skill skills = 1;
    int32 total = 2;
}

message GetSkillRequest {
    string id = 1;
}

message GetSkillResponse {
    Skill skill = 1;
}

message AddSkillRequest {
    Skill skill = 1;
}

message AddSkillResponse {
    Skill skill = 1;
}

message UpdateSkillRequest {
    string id = 1;
    Skill skill = 2;
}

message UpdateSkillResponse {
    Skill skill = 1;
}

message DeleteSkillRequest {
    string id = 1;
}

message DeleteSkillResponse {
    bool success = 1;
}

message ListModelsRequest {
    int32 page = 1;
    int32 page_size = 2;
    string query = 3;
    bool status = 4;
}

message ListModelsResponse {
    repeated Model models = 1;
    int32 total = 2;
}

message GetModelRequest {
    string id = 1;
}

message GetModelResponse {
    Model model = 1;
}

message AddModelRequest {
    Model model = 1;
    map<string, bytes> model_files = 2; // 模型文件内容，key为文件名，value为文件内容
}

message AddModelResponse {
    bool success = 1;
    string message = 2;
    Model model = 3;
}

message UpdateModelRequest {
    string id = 1;
    Model model = 2;
}

message UpdateModelResponse {
    Model model = 1;
}

message DeleteModelRequest {
    string id = 1;
}

message DeleteModelResponse {
    bool success = 1;
    string message = 2;
}

message InferRequest {
    string model_id = 1;
    bytes image_data = 2;
    map<string, string> params = 3;
}

message InferResponse {
    bool success = 1;
    map<string, bytes> results = 2;
    string error_message = 3;
}

// 加载模型请求
message LoadModelRequest {
    string model_name = 1;
    string model_version = 2; // 可选
}

// 加载模型响应
message LoadModelResponse {
    bool success = 1;
    string message = 2;
    string model_name = 3;
    bool ready = 4;
}

// 卸载模型请求
message UnloadModelRequest {
    string model_name = 1;
    bool unload_dependents = 2; // 是否同时卸载依赖的模型
}

// 卸载模型响应
message UnloadModelResponse {
    bool success = 1;
    string message = 2;
    string model_name = 3;
}

// 模型信息
message ModelInfo {
    string name = 1;            // 模型名称
    string state = 2;           // 模型状态
    bool ready = 3;             // 是否就绪
    string metadata = 4;        // 模型元数据(JSON格式)
    string config = 5;          // 模型配置(JSON格式)
}

// 获取模型信息请求
message ModelInfoRequest {
    string model_name = 1;
}

// 获取模型信息响应
message ModelInfoResponse {
    bool success = 1;
    string message = 2;
    ModelInfo model_info = 3;
}

// 同步模型请求
message SyncModelsRequest {
    bool force_update = 1; // 是否强制更新已存在的模型信息
}

// 同步模型响应
message SyncModelsResponse {
    bool success = 1; 
    string message = 2;
    int32 added_count = 3; // 新增的模型数量
    int32 updated_count = 4; // 更新的模型数量
} 